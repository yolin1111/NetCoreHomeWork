請以 ContosoUniversity 資料庫為主要資料來源
dotnet new mvc -n NetCoreHomeWork
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.EntityFrameworkCore.Tools

須透過 DB First 流程建立 EF Core 實體資料模型
dotnet ef dbcontext scaffold "Server=(localdb)\MSSQLLocalDB;Database=ContosoUniversity;Trusted_Connection=True;MultipleActiveResultSets=true" Microsoft.EntityFrameworkCore.SqlServer -o Models
須對資料庫進行版控 (使用資料庫移轉方式)
dotnet ef migrations add Init
dotnet ef database update 會錯誤，因為資料表已經建立
刪除migrations資料下UP AND DOWN程式碼

須對每一個表格設計出完整的 CRUD 操作 APIs
開啟VS2019建立EF API Controllers

針對 Departments 表格的 CUD 操作需用到預存程序
請在 CoursesController 中設計 vwCourseStudents 與 vwCourseStudentCount 檢視表的 API 輸出
請用 Raw SQL Query 的方式查詢 vwDepartmentCourseCount 檢視表的內容

請修改 Course, Department, Person 表格，新增 DateModified 欄位(datetime) (請新增資料庫移轉紀錄)，並且這三個表格的資料透過 Web API 更新時，都要自動更新該欄位為更新當下的時間。

ALTER TABLE Course ADD DateModified datetime;
ALTER TABLE Department ADD DateModified datetime;
ALTER TABLE Person ADD DateModified datetime;

dotnet ef dbcontext scaffold "Server=(localdb)\MSSQLLocalDB;Database=ContosoUniversity;Trusted_Connection=True;MultipleActiveResultSets=true" Microsoft.EntityFrameworkCore.SqlServer -o Models -f

dotnet ef migrations add DateModified
dotnet ef database update

請修改 Course, Department, Person 表格欄位，新增 IsDeleted 欄位 (bit) (請新增資料庫移轉紀錄)，且讓所有刪除這三個表格資料的 API 都不能真的刪除資料，而是標記刪除即可，標記刪除後，在 GET 資料的時候不能輸出該筆資料。
新增 public bool IsDeleted { get; set; }
dotnet ef migrations add IsDeleted
dotnet ef database update
dotnet ef dbcontext scaffold "Server=(localdb)\MSSQLLocalDB;Database=ContosoUniversity;Trusted_Connection=True;MultipleActiveResultSets=true" Microsoft.EntityFrameworkCore.SqlServer -o Models -f